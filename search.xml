<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WEBRTC</title>
      <link href="/2020/06/16/WEBRTC/"/>
      <url>/2020/06/16/WEBRTC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="呼叫"><a href="#呼叫" class="headerlink" title="呼叫"></a>呼叫</h1><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>主要实现门口机通过数字键盘和物管按钮实现对中心机和住户的呼叫功能。</p><h2 id="呼叫逻辑"><a href="#呼叫逻辑" class="headerlink" title="呼叫逻辑"></a>呼叫逻辑</h2><p><img data-src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E9%97%A8%E5%8F%A3%E6%9C%BA%E9%87%8D%E6%9E%84%5C%E5%91%BC%E5%8F%AB%E9%80%BB%E8%BE%91.png" alt=""></p><h2 id="呼叫管理员-物管"><a href="#呼叫管理员-物管" class="headerlink" title="呼叫管理员(物管)"></a>呼叫管理员(物管)</h2><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ol><li><p>用户按物管进入呼叫界面，取消可返回主界面，确认进入呼叫界面</p></li><li><p>确认呼叫-&gt;keyConfirm(BoardKey.KEY_CONFIRM);</p></li><li><p>关闭其他fragment，按键响应onkey（int keyCode）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onKey</span><span class="params">(<span class="keyword">int</span> keyCode)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"key_hint"</span>, String.valueOf(keyCode));</span><br><span class="line">        <span class="keyword">switch</span> (keyCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_DPAD_CENTER:<span class="comment">// 呼叫确认</span></span><br><span class="line">                exeConfirm();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_ENTER:</span><br><span class="line">                exeConfirm();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_C:</span><br><span class="line">                exeCancel();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>呼叫确认执行exeConfirm()-&gt;listener.confirm()</p></li><li><p>执行dialogClickListener(type)     注：room的组成和数字键盘呼叫有差异</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dialogClickListener</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">cancleDialogFragment();</span><br><span class="line">clearMessageToHandler(myHandler, DISSMISS_CALLMANAGER_FRAGMENT);</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">String community_id = ReadSharedPerference(<span class="string">"app"</span>, <span class="string">"community_id"</span>);</span><br><span class="line"><span class="comment">// 聊天房间定义：社区id-门牌号-被呼叫者id</span></span><br><span class="line"><span class="comment">// 手机呼叫管理中心：社区id-门牌号-呼叫者id</span></span><br><span class="line"><span class="comment">// 门口机呼叫管理中心:小区id-calladmin</span></span><br><span class="line"><span class="keyword">final</span> String room = community_id + <span class="string">"-calladmin"</span>;</span><br><span class="line">LogUtil.i(TAG, <span class="string">"呼叫 room = "</span> + room);</span><br><span class="line">startCall(adFragment, room, <span class="keyword">false</span>, <span class="string">"none"</span>, <span class="number">1</span>, community_id, <span class="keyword">null</span>, <span class="string">""</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;<span class="comment">// 取消</span></span><br><span class="line">continueAD();</span><br><span class="line">EventBusUtils.post(<span class="keyword">new</span> ScanPreview(<span class="keyword">true</span>,        CheckFaceUtils.getResumeScanFaceDelaytime()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 无网络取消</span></span><br><span class="line">continueAD();</span><br><span class="line">EventBusUtils.post(<span class="keyword">new</span> ScanPreview(<span class="keyword">true</span>, CheckFaceUtils.getResumeScanFaceDelaytime()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>6. 跳转到呼叫界面startCall()处理<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCall</span><span class="params">(Fragment fragment, String room, <span class="keyword">boolean</span> phoneCanCall, String phoneNumber, <span class="keyword">int</span> type, String calleeid,</span></span></span><br><span class="line"><span class="function"><span class="params">                       String phoneCall, String captureKey)</span> </span>&#123;<span class="comment">//String uriStr, String wsUri</span></span><br><span class="line">CameraManager2.getInstance().releaseNOW();</span><br><span class="line">Map&lt;String, Serializable&gt; callParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//判断是否用sip呼叫</span></span><br><span class="line">isCallSip(callParameters);</span><br><span class="line">StarCallUtil.getInstance().startCall(fragment, <span class="keyword">this</span>, room, phoneCanCall, phoneNumber, type, calleeid, <span class="string">""</span>, phoneCall, captureKey, callParameters);</span><br><span class="line">StarCallUtil.getInstance().saveCallLog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>7. isCallSip()处理全世通sip，主要处理callParameters参数(ip和先呼全世通室内分机)，并根据callByQSTSip设置摄像头<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isCallSip</span><span class="params">(Map&lt;String, Serializable&gt; callParameters)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> callByQSTSip = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (SharedPrefsUtils.equals(ApplicationConstants.SP_FILE_NAME,</span><br><span class="line">SharePerferenceKey.IN_DOOR, ApplicationConstants.ONE)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DBManager dbManager = DBManager.getInstance();</span><br><span class="line">List&lt;TbDevice&gt; list = dbManager.getTbDeviceDaoSession().queryBuilder()</span><br><span class="line">.where(TbDeviceDao.Properties.Type.eq(<span class="string">"6"</span>))</span><br><span class="line">.list();</span><br><span class="line">dbManager.closeIpTableDb();</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">TbDevice tbDevice = list.get(<span class="number">0</span>);</span><br><span class="line">String ip = tbDevice.ip;</span><br><span class="line">Log.i(TAG, <span class="string">"callmanager: "</span> + ip);</span><br><span class="line">callParameters.put(OnCallActivity.EXTRA_QST_SIP_IP, list.get(<span class="number">0</span>));</span><br><span class="line">callParameters.put(OnCallActivity.EXTRA_CALL_TYPE, OnCallActivity.CAPP_PROCESS_TYPE_QST);</span><br><span class="line">callByQSTSip = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Log.i(TAG, <span class="string">"callmanager: 没找到ip "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">Log.i(TAG, <span class="string">"callmanager: iptable数据库解析异常,请检查上传数据库表是否正确,sip呼叫失败 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Log.i(TAG, <span class="string">"callmanager: callByQSTSip = false;"</span>);</span><br><span class="line">callByQSTSip = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (callByQSTSip) &#123;</span><br><span class="line"><span class="keyword">int</span> cameraId = DeviceManager.getInstance().getVideoCamera();</span><br><span class="line">LinphoneManager.setCameraColors(cameraId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="呼叫用户-数字键盘"><a href="#呼叫用户-数字键盘" class="headerlink" title="呼叫用户(数字键盘)"></a>呼叫用户(数字键盘)</h2><h3 id="流程说明-1"><a href="#流程说明-1" class="headerlink" title="流程说明"></a>流程说明</h3><ol><li><p>用户按数字键盘输入房号或手机号按确认进行呼叫</p></li><li><p>校验输入的是房号还是手机号，若是房号是三位则在前面添一个“0”</p></li><li><p>按确认后，根据输入的内容进行处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCenterEvent</span><span class="params">(<span class="keyword">int</span> type, String number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> ICallModule.Type.INVALID:</span><br><span class="line">                mView.onInvalidOperation(ICallView.OP.INVALID_NUMBER);</span><br><span class="line">                SoundPlayerManager.playSound(APP.getContext(), SoundPlayerManager.PLS_INPUT_ROOM_OR_PHONE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ICallModule.Type.PHONE_NUMBER:</span><br><span class="line">                mHandler.removeCallbacks(mAutoQuitTask);</span><br><span class="line">                onCallPhone(number);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ICallModule.Type.ROOM_NUMBER:</span><br><span class="line">                mHandler.removeCallbacks(mAutoQuitTask);</span><br><span class="line">                callByRoomNumber(number);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ICallModule.Type.BUILD_ROOM_NUMBER:</span><br><span class="line">                mHandler.removeCallbacks(mAutoQuitTask);</span><br><span class="line">                String build_num = number.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                String room_num = number.substring(<span class="number">4</span>);</span><br><span class="line">                callByBuildAndRoomNumber(build_num, room_num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ICallModule.Type.DISABLE:</span><br><span class="line">                SoundPlayerManager.playVoice(R.raw.function_disabled);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li><p>房号：callByRoomNumber(number);</p><ul><li><p>判断是否为全世通室内sip分机并检测ip状态</p></li><li><p>callByQSTSip = true;//表示检测ip正常可以连接</p></li><li><p>播放嘟嘟声  抓拍    takepic()</p></li><li><p>准备开始呼叫 prepareStarCall(),能呼sip则设置摄像头颜色</p></li><li><p>startcall()跳转到呼叫界面进行呼叫处理</p></li></ul></li></ol></li></ul></li></ol><pre><code> * 2. 手机号：onCallPhone(number)-&gt;callByPhone()    * onCallLoad(),加载嘟嘟声      * 抓拍    takepic()      * 拍照完成，呼叫房间startCall()&gt; | method    | parameter      | types   | instructions                                                 | phone       | room             |&gt; | --------- | -------------- | ------- | ------------------------------------------------------------ | ----------- | ---------------- |&gt; | startCall | room           | final   | **新sdk**，小区id-楼栋门牌-单元门牌 room = community_id + &quot;-&quot; + tempBuildNum + &quot;-&quot; + u.getNum() | phonenumber | room             |&gt; |           | phoneCanCall   | boolean | 是否能通过电话呼叫                                           | **false**?  | false            |&gt; |           | phoneNumber    | String  | 电话号码                                                     | phonenumber | none             |&gt; |           | type           | int     | 0：住户，1：管理员，2：手机号码                              | 2           | 0                |&gt; |           | calleeid       | String  | 被呼id，单元为单元id                                         | &quot;&quot;          | u.getid()单元id  |&gt; |           | calleeNum      | String  | 门牌号                                                       | &quot;none&quot;      | u.getnum()门牌号 |&gt; |           | phoneCall      | String  | 传入的手机号                                                 | phonenumber | null             |&gt; |           | captureKey     | String  | 快照key，呼叫管理员存&quot;&quot;即可                                  | &quot;&quot;          | &quot;&quot;               |&gt; |           | u              | Cell    | 单元                                                         | null        | u                |&gt; |           | callBulid_num  | String  | 楼栋编号                                                     | null        | tempBuildNum     |&gt; |           | callParameters | String  | 呼叫参数(ip、呼叫类型、快照路径)                             | null        | callParameters   |​            </code></pre><ol><li><p>attachIntent( 获取默认RTC参数getDefaultRtcParamter()；初始化通话配置initCallConfig() )</p></li><li><p>postStartCall()开始呼叫，先呼叫全世通sip室内分机，</p></li><li><p>呼叫全世通sip室内分机失败，转webrtc，initCall(初始化apprtc；设置状态监听；预览；)</p></li><li><p>startCall()  ,执行连接，开始连接rtc计时，嘟嘟声</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Log.e(TAG, <span class="string">"startCall: "</span>);</span><br><span class="line">apprtc.exeConnectOnly();</span><br><span class="line">startConnectRTCTimer();</span><br><span class="line">playCallingTinkle(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span> (callRtcParams.supportCallSip)</span><br><span class="line">loadSip();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开始连接startconnect()-&gt;开始预览和连接startPreviewAndConnect</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPreviewAndConnect</span><span class="params">(Activity context, <span class="keyword">boolean</span> autoConnect)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = context;</span><br><span class="line">        iceConnected = <span class="keyword">false</span>;</span><br><span class="line">        signalingParameters = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//初始化界面,主要是加载一些view</span></span><br><span class="line">        init(autoConnect);</span><br><span class="line">        <span class="comment">//开启加绑定</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(activity.getApplicationContext(), WebSocketService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        activity.bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">        activity.startService(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最终的呼叫处理-OncallActivity2-java"><a href="#最终的呼叫处理-OncallActivity2-java" class="headerlink" title="最终的呼叫处理(OncallActivity2.java)"></a>最终的呼叫处理(OncallActivity2.java)</h2><h3 id="真实的呼叫连接逻辑分析："><a href="#真实的呼叫连接逻辑分析：" class="headerlink" title="真实的呼叫连接逻辑分析："></a>真实的呼叫连接逻辑分析：</h3><p><img data-src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200619102239929.png" alt="image-20200619102239929"></p><h3 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h3><h4 id="oncreate-初始化相关"><a href="#oncreate-初始化相关" class="headerlink" title="oncreate() 初始化相关"></a>oncreate() 初始化相关</h4><ol><li>屏幕处理</li><li>获取RTC配置和初始化通话配置</li><li>风扇处理</li></ol><h4 id="onstart-gt-postStartCall"><a href="#onstart-gt-postStartCall" class="headerlink" title="onstart()-&gt;postStartCall()"></a>onstart()-&gt;postStartCall()</h4><ol><li><p>startCallQstSip()呼全视通</p><p>​    </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCallQstSip</span><span class="params">(TbDevice tab, String number)</span> </span>&#123;</span><br><span class="line">LinphoneManager.getLc().addListener(linphoneListener);</span><br><span class="line">Log.e(TAG, <span class="string">"startCallQstSip: "</span> + tab + <span class="string">", "</span> + number);</span><br><span class="line">Log.e(TAG, <span class="string">"startCallQstSip: "</span> + tab.getIp() + <span class="string">", "</span> + tab.getNumber());</span><br><span class="line">LinphoneManager.getInstance().newOutgoingCall(tab.getNumber() + <span class="string">"@"</span> + tab.getIp(), tab.getNumber());</span><br><span class="line">playCallingTinkle(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中LinphoneManager.getLc().addListener(linphoneListener)处理判断全视通是否通话，已经通话挂断的时候就要关闭界面，没有接通挂断的时候不能关闭界面，需要呼叫webrtc</p></li><li><p>initcall()处理webrtc</p><p>初始化，监听，连接startcall()-&gt;真实连接房间realStarConnect()</p></li></ol><p>PjSip集成webrtc媒体处理：</p><ul><li>pjsua_vid.c、pjsua_media.c、pjsua_aud.c</li></ul>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webrtc </tag>
            
            <tag> java </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+nginx+git静态搭建!</title>
      <link href="/2020/06/16/test/"/>
      <url>/2020/06/16/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Android-Developer"><a href="#Android-Developer" class="headerlink" title="Android Developer"></a>Android Developer</h2><h3 id="Java-JVM"><a href="#Java-JVM" class="headerlink" title="Java JVM"></a>Java JVM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ system.out.println(<span class="string">"java JVM原理"</span>);</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Gradlew"><a href="#Gradlew" class="headerlink" title="Gradlew"></a>Gradlew</h3><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Git init</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
